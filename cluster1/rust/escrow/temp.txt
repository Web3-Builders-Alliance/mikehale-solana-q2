it('Deposit SOL!', async () => {
    // Add your test here.
    try {
      const txhash = await program.methods
        .deposit(new BN(0.1 * LAMPORTS_PER_SOL))
        .accounts({
          owner: keypair.publicKey,
          vault_state: vaultState.publicKey,
          vault_auth: vaultAuth_key,
          vault: vault_key,
          system_program: SystemProgram.programId,
        })
        .signers([keypair])
        .rpc({
          skipPreflight: true,
        });
      console.log(`Success! Check out your TX here:
      https://explorer.solana.com/tx/${txhash}?cluster=devnet`);
      let accountBalance = await provider.connection.getBalance(vault_key);
      console.log('\nVault Balance: ', accountBalance);
    } catch (e) {
      console.error(`Oops, something went wrong: ${e}`);
    }
  });

  it('Withdraw SOL!', async () => {
    // Add your test here.
    try {
      const txhash = await program.methods
        .withdraw(new BN(0.1 * LAMPORTS_PER_SOL))
        .accounts({
          owner: keypair.publicKey,
          vault_state: vaultState.publicKey,
          vault_auth: vaultAuth_key,
          vault: vault_key,
          system_program: SystemProgram.programId,
        })
        .signers([keypair])
        .rpc();
      console.log(`Success! Check out your TX here:
      https://explorer.solana.com/tx/${txhash}?cluster=devnet`);
      let accountBalance = await provider.connection.getBalance(vault_key);
      console.log('\nVault Balance: ', accountBalance);
    } catch (e) {
      console.error(`Oops, something went wrong: ${e}`);
    }
  });

  /*
  it('Deposit SPL', async () => {
    // Add your test here.
    //Create a new mint account with our wallet as init payer, mint authority and freeze authority
    let mint = await createMint(
      provider.connection,
      keypair,
      keypair.publicKey,
      keypair.publicKey,
      6
    );
    console.log('Mint ID: ', mint.toString());

    //create our associated token account
    let ataFrom = await getOrCreateAssociatedTokenAccount(
      provider.connection,
      keypair,
      mint,
      keypair.publicKey
    );
    console.log('ATA From: ', ataFrom.address.toString());

    //create the recipient token account
    let ataTo = await getOrCreateAssociatedTokenAccount(
      provider.connection,
      keypair,
      mint,
      vaultAuth_key,
      true
    );
    console.log('ATA To: ', ataFrom.address.toString());

    //Mint SPL Tokens to our account (ATA)
    let tx = await mintTo(
      provider.connection,
      keypair,
      mint,
      ataFrom.address,
      keypair,
      1_000_000 * 1
    );

    //Log our mint transaction
    console.log('Token minted: ', tx);

    try {
      const txhash = await program.methods
        .depositSpl(new BN(1 * 1_000_000))
        .accounts({
          owner: keypair.publicKey,
          vaultState: vaultState.publicKey,
          vaultAuth: vaultAuth_key,
          systemProgram: SystemProgram.programId,
          ownerAta: ataFrom.address,
          vaultAta: ataTo.address,
          tokenMint: mint,
          tokenProgram: TOKEN_PROGRAM_ID,
        })
        .signers([keypair])
        .rpc();
      console.log(`Success! Check out your TX here:
      https://explorer.solana.com/tx/${txhash}?cluster=devnet`);
      let accountBalance = (
        await provider.connection.getTokenAccountBalance(ataTo.address)
      ).value.amount;
      console.log('\nSPL Balance: ', accountBalance);
    } catch (e) {
      console.error(`Oops, something went wrong: ${e}`);
    }
  });

  it('Withdraw SPL', async () => {
    // Add your test here.
    //Create a new mint account with our wallet as init payer, mint authority and freeze authority
    let mint = await createMint(
      provider.connection,
      keypair,
      keypair.publicKey,
      keypair.publicKey,
      6
    );
    console.log('Mint ID: ', mint.toString());

    //create our associated token account
    let ataFrom = await getOrCreateAssociatedTokenAccount(
      provider.connection,
      keypair,
      mint,
      keypair.publicKey
    );
    console.log('ATA From: ', ataFrom.address.toString());

    //create the recipient token account
    let ataTo = await getOrCreateAssociatedTokenAccount(
      provider.connection,
      keypair,
      mint,
      vaultAuth_key,
      true
    );
    console.log('ATA To: ', ataFrom.address.toString());

    //Mint SPL Tokens to our account (ATA)
    let tx = await mintTo(
      provider.connection,
      keypair,
      mint,
      ataFrom.address,
      keypair,
      1_000_000 * 1
    );

    //Log our mint transaction
    console.log('Token minted: ', tx);

    try {
      const txhash = await program.methods
        .depositSpl(new BN(1 * 1_000_000))
        .accounts({
          owner: keypair.publicKey,
          vaultState: vaultState.publicKey,
          vaultAuth: vaultAuth_key,
          systemProgram: SystemProgram.programId,
          ownerAta: ataFrom.address,
          vaultAta: ataTo.address,
          tokenMint: mint,
          tokenProgram: TOKEN_PROGRAM_ID,
        })
        .signers([keypair])
        .rpc();
      console.log(`\nSPL Deposit Success! Check out your TX here:
      https://explorer.solana.com/tx/${txhash}?cluster=devnet`);
      let accountBalance = (
        await provider.connection.getTokenAccountBalance(ataTo.address)
      ).value.amount;
      console.log('SPL Balance: ', accountBalance);
    } catch (e) {
      console.error(`Oops, something went wrong: ${e}`);
    }

    try {
      const txhash = await program.methods
        .withdrawSpl(new BN(1 * 1_000_000))
        .accounts({
          owner: keypair.publicKey,
          vaultState: vaultState.publicKey,
          vaultAuth: vaultAuth_key,
          systemProgram: SystemProgram.programId,
          ownerAta: ataFrom.address,
          vaultAta: ataTo.address,
          tokenMint: mint,
          tokenProgram: TOKEN_PROGRAM_ID,
        })
        .signers([keypair])
        .rpc();
      console.log(`\n\nSPL Withdraw Success! Check out your TX here:
      https://explorer.solana.com/tx/${txhash}?cluster=devnet`);
      let accountBalance = (
        await provider.connection.getTokenAccountBalance(ataTo.address)
      ).value.amount;
      console.log('SPL Balance: ', accountBalance);
    } catch (e) {
      console.error(`Oops, something went wrong: ${e}`);
    }
  });
  */